Why Use 'use strict'?
Strict mode helps in the following ways:

1. Prevents Accidental Global Variables
Without strict mode:

function test() {
    x = 5; // No error (Implicit global variable)
}
test();
console.log(x); // Outputs 5 (Pollutes global scope)
With strict mode:


'use strict';
function test() {
    x = 5; // ‚ùå ReferenceError: x is not defined
}
test();
Strict mode forces variables to be explicitly declared with let, const, or var.

2. Catches Silent Errors
Some JavaScript mistakes fail silently, but strict mode throws errors.

Without strict mode:

Object.defineProperty(this, "prop", { value: 10, writable: false });
prop = 20; // No error, but assignment fails silently
With strict mode:

'use strict';
Object.defineProperty(this, "prop", { value: 10, writable: false });
prop = 20; // ‚ùå TypeError: Cannot assign to read-only property 'prop'
3. Prevents Duplicate Parameter Names
Without strict mode:

function sum(a, a, c) { // No error (Ambiguous)
    return a + c;
}
console.log(sum(1, 2, 3)); // Outputs 5 (Unexpected behavior)
With strict mode:


'use strict';
function sum(a, a, c) { 
    // ‚ùå SyntaxError: Duplicate parameter name not allowed in strict mode
    return a + c;
}
4. Disallows this as undefined in Functions
In strict mode, calling a regular function without an explicit this binding results in undefined instead of the global object.

Without strict mode:


function show() {
    console.log(this); // Outputs global object (window in browsers)
}
show();
With strict mode:


'use strict';
function show() {
    console.log(this); // Outputs undefined
}
show();
When to Use 'use strict'?
Recommended for all modern JavaScript code to prevent accidental errors.
Use it at the beginning of scripts or functions to apply stricter rules.
Not needed in ES6+ modules, as they are always in strict mode by default.
‚úÖ Best Practice: Always write 'use strict'; at the top of your JavaScript files unless using ES6 modules.

Let me know if you need more details! üöÄ
